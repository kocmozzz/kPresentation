{"version":3,"sources":["polyfills.js","helpers.js","kpresentation.js","kshow.js"],"names":[],"mappings":"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","file":"kpresentations.min.js","sourcesContent":["if (!Function.prototype.bind) {\n    Function.prototype.bind = function (oThis) {\n        if (typeof this !== 'function') {\n            // closest thing possible to the ECMAScript 5\n            // internal IsCallable function\n            throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');\n        }\n\n        var aArgs = Array.prototype.slice.call(arguments, 1),\n            fToBind = this,\n            fNOP = function () {\n            },\n            fBound = function () {\n                return fToBind.apply(this instanceof fNOP && oThis\n                        ? this\n                        : oThis,\n                    aArgs.concat(Array.prototype.slice.call(arguments)));\n            };\n\n        fNOP.prototype = this.prototype;\n        fBound.prototype = new fNOP();\n\n        return fBound;\n    };\n}","(function () {\n    this.Helper = function () {\n    };\n\n    /**\n     * Extend default options\n     * @param defaultOptions\n     * @param customOptions\n     * @returns {*}\n     */\n    Helper.prototype.extendDefaultOptions = function (defaultOptions, customOptions) {\n        var property;\n\n        for (property in customOptions) {\n            if (customOptions.hasOwnProperty(property)) {\n                defaultOptions[property] = customOptions[property];\n            }\n        }\n\n        return defaultOptions;\n    };\n})();","(function (window, document, undefined) {\n\n    function Exception(message) {\n        console.warn(message);\n    }\n\n    /**\n     * Presentation\n     * @param domObj\n     * @param slideTagName\n     * @returns {*}\n     * @constructor\n     */\n    this.KPresentation = function (domObj, slideTagName) {\n        this.options = {\n            activePresentationClass: 'is-shown',\n            navigatedPresentationClass: 'is-navigated',\n            activeBodyClass: 'show-started',\n            activeSlideClass: 'active',\n            progressbarClass: 'k-presentation-progress',\n            browserPrefixes: [\n                'WebkitTransform',\n                'MozTransform',\n                'msTransform',\n                'OTransform',\n                'transform'\n            ]\n        };\n\n        this.isShown = false;\n        this.isNavigated = false;\n        this.selected = false;\n        this.slides = [];\n        this.activeSlide = 0;\n        this.slidesCount = 0;\n        this.progressBar = {};\n        this.domObj = domObj;\n        this.slideTagName = slideTagName;\n\n        this.slides = this.domObj.getElementsByTagName(this.slideTagName);\n        this.slides = Array.prototype.slice.call(this.slides);\n        this.slidesCount = this.slides.length;\n\n        /**\n         * Prepare presentation to be started by click on it\n         */\n        function preparePresentationToBeShown() {\n            var self = this;\n\n            /* Create progressbar */\n            self.progressBar = document.createElement('div');\n            self.progressBar.className = self.options.progressbarClass;\n            self.domObj.appendChild(self.progressBar);\n        }\n\n        function init() {\n            if (this.slidesCount) {\n                this.slides[0].classList.add(this.options.activeSlideClass);\n                preparePresentationToBeShown.call(this);\n            } else {\n                throw new Exception(\"No slides available. Check slides class selector.\");\n            }\n        }\n\n        init.call(this);\n\n        /**\n         * Compute scale to resize presentation\n         * @returns {number}\n         */\n        function computeScale() {\n            return 1 / Math.max(\n                this.domObj.clientWidth / window.innerWidth,\n                this.domObj.clientHeight / window.innerHeight\n            );\n        }\n\n        /**\n         * Resize presentation to fill window properly\n         * @param scale\n         */\n        this.resize = (function (scale) {\n            var self = this;\n\n            scale = (typeof scale == 'undefined' || typeof scale == 'object') ? computeScale.call(this) : scale;\n\n            this.options.browserPrefixes.forEach(function (prop) {\n                self.domObj.style[prop] = 'scale(' + scale + ')';\n            });\n        }).bind(this);\n\n        /**\n         * Compute progress percentage\n         * @returns {number}\n         */\n        function computeProgress() {\n            if (!this.activeSlide) return 0;\n\n            return 100 / (this.slidesCount - 1) * (this.activeSlide);\n        }\n\n        /**\n         * Update progressbar width\n         */\n        this.updateProgress = (function () {\n            this.progressBar.style.width = computeProgress.call(this) + '%';\n        }).bind(this);\n\n        /**\n         * Slide click handler\n         * @type {*|function(this:*)}\n         */\n        this.slideClick = (function (e) {\n            var slide = e.target,\n                ftn = this.slideTagName.toUpperCase();\n\n            if (slide.tagName !== ftn) {\n                while (slide.tagName !== ftn) {\n                    slide = slide.parentNode;\n                }\n            }\n\n            this.goto(this.slides.indexOf(slide));\n        }).bind(this);\n\n        /**\n         * Keypress handler\n         * @type {*|function(this:*)}\n         */\n        this.keyPress = (function (e) {\n            switch (e.keyCode) {\n                case 27: //esc\n                    if (!this.isShown) {\n                        this.stopNavigatePresentation();\n                        break;\n                    }\n\n                    this.stopPresentation();\n                    break;\n                case 37:\n                    this.prev();\n                    break;\n                case 39:\n                    this.next();\n                    break;\n                case 32:\n                    this.next();\n                    break;\n                case 13:\n                    if (!this.isShown && this.isNavigated) {\n                        this.startPresentation();\n                    }\n                    break;\n                default:\n                    break;\n            }\n        }).bind(this);\n\n        return this;\n    };\n\n    //old fashioned way to support phantomJS\n    var presentationClosed = document.createEvent('Event');\n    presentationClosed.initEvent('presentation:closed', true, true);\n\n    /* Public methods */\n    /**\n     * Start slide navigation\n     */\n    KPresentation.prototype.startNavigatePresentation = function () {\n        this.isNavigated = true;\n        this.domObj.classList.add(this.options.navigatedPresentationClass);\n\n        this.domObj.addEventListener('click', this.slideClick, false);\n        window.addEventListener('keydown', this.keyPress, false);\n    };\n\n    /**\n     * Close slide navigation\n     */\n    KPresentation.prototype.stopNavigatePresentation = function () {\n        this.isNavigated = false;\n        this.domObj.classList.remove(this.options.navigatedPresentationClass);\n        this.domObj.removeEventListener('click', this.slideClick, false);\n\n        window.removeEventListener('keydown', this.keyPress, false);\n        document.body.dispatchEvent(presentationClosed);\n    };\n\n    /**\n     * Start presentation\n     */\n    KPresentation.prototype.startPresentation = function () {\n        if (this.isShown) return;\n\n        this.domObj.classList.add(this.options.activePresentationClass);\n        document.body.classList.add(this.options.activeBodyClass);\n        this.domObj.classList.remove(this.options.navigatedPresentationClass);\n        this.isShown = true;\n\n        this.resize();\n        window.addEventListener('resize', this.resize);\n\n        return this;\n    };\n\n    /**\n     * Cancel presentation\n     */\n    KPresentation.prototype.stopPresentation = function () {\n        this.domObj.classList.remove(this.options.activePresentationClass);\n        document.body.classList.remove(this.options.activeBodyClass);\n        this.domObj.classList.add(this.options.navigatedPresentationClass);\n        this.isShown = false;\n\n        window.removeEventListener('resize', this.resize);\n        this.resize(1);\n\n        return this;\n    };\n\n    /**\n     * Go to next slide\n     */\n    KPresentation.prototype.next = function () {\n        if (this.checkLast()) return;\n\n        this.slides[this.activeSlide].classList.remove(this.options.activeSlideClass);\n        this.activeSlide++;\n        this.slides[this.activeSlide].classList.add(this.options.activeSlideClass);\n\n        this.updateProgress();\n\n        return this;\n    };\n\n    /**\n     * Go to prev slide\n     */\n    KPresentation.prototype.prev = function () {\n        if (this.checkFirst()) return;\n\n        this.slides[this.activeSlide].classList.remove(this.options.activeSlideClass);\n        this.activeSlide--;\n        this.slides[this.activeSlide].classList.add(this.options.activeSlideClass);\n\n        this.updateProgress();\n\n        return this;\n    };\n\n    /**\n     * Go to $index slide\n     */\n    KPresentation.prototype.goto = function (i) {\n        if (i < 0 || i > this.slidesCount - 1) return false;\n\n        this.slides[this.activeSlide].classList.remove(this.options.activeSlideClass);\n        this.activeSlide = i;\n        this.slides[this.activeSlide].classList.add(this.options.activeSlideClass);\n\n        this.updateProgress();\n\n        if (!this.isShown) this.startPresentation();\n\n        return this;\n    };\n\n    /**\n     * Check if active slide is last\n     */\n    KPresentation.prototype.checkLast = function () {\n        return this.activeSlide === this.slidesCount - 1;\n    };\n\n    /**\n     * Check if active slide is first\n     */\n    KPresentation.prototype.checkFirst = function () {\n        return this.activeSlide === 0;\n    };\n})(this, this.document);","(function (window, document) {\n    this.KShow = function () {\n        var defaults = {\n                presentationClass: 'k-presentation',\n                slideTag: 'section',\n                hiddenClass: 'hidden'\n            },\n            instance = this;\n\n        /**\n         * Use KShow as singleton\n         * @returns {*}\n         * @constructor\n         */\n        KShow = function () {\n            return instance;\n        };\n\n        KShow.prototype = this;\n        instance = new KShow();\n        instance.constructor = KShow();\n\n        this.presentations = [];\n\n        /**\n         * Create new options by passing custom arguments\n         */\n        if (arguments[0] && typeof arguments[0] == 'object') {\n            this.options = this.extendDefaultOptions(defaults, arguments[0]);\n        } else {\n            this.options = defaults;\n        }\n\n        /**\n         * Event handlers\n         * @type {{keydown: Function}}\n         */\n        this.handlers = {\n            start: function (e) {\n                var presentation = e.target;\n\n                if (!presentation.classList.contains(this.options.presentationClass)) {\n                    while (!presentation.classList.contains(this.options.presentationClass)) {\n                        presentation = presentation.parentNode;\n                    }\n                }\n\n                var index = this.presentationsDomObjects.indexOf(presentation);\n\n                if (index !== -1) {\n                    if (this.presentations[index].isNavigated) {\n                        return false;\n                    } else {\n                        this.presentations[index].startNavigatePresentation();\n                    }\n\n                    for (var i = 0, length = this.presentationsDomObjects.length; i < length; i++) {\n                        if (i === index) continue;\n\n                        this.presentationsDomObjects[i].classList.add(this.options.hiddenClass);\n                    }\n                }\n\n                e.stopImmediatePropagation();\n            },\n\n            stop: function () {\n                for (var i = 0, length = this.presentationsDomObjects.length; i < length; i++) {\n                    this.presentationsDomObjects[i].classList.remove(this.options.hiddenClass);\n                }\n\n            }\n        };\n\n        /**\n         * Initialize object of kShow\n         */\n        function init() {\n            this.presentationsDomObjects = document.getElementsByClassName(this.options.presentationClass);\n            this.presentationsDomObjects = Array.prototype.slice.call(this.presentationsDomObjects);\n\n            var length = this.presentationsDomObjects.length;\n\n            if (!length) {\n                console.warn(\"No presentations available. Check presentations class selector.\");\n            }\n\n            for (var i = 0; i < length; i++) {\n                this.add(new KPresentation(this.presentationsDomObjects[i], this.options.slideTag));\n            }\n        }\n\n        function bind() {\n            var self = this;\n\n            self.presentationsDomObjects.forEach(function (presentation) {\n                presentation.addEventListener('click', self.handlers.start.bind(self), false);\n            });\n            document.addEventListener(\"presentation:closed\", self.handlers.stop.bind(self));\n        }\n\n        init.call(this);\n        bind.call(this);\n\n        return instance;\n    };\n\n    KShow.prototype = new Helper();\n\n    /**\n     * Add presentation to list\n     * @param obj\n     * @returns {KShow}\n     */\n    KShow.prototype.add = function (obj) {\n        this.presentations.push(obj);\n\n        return this;\n    };\n\n    /**\n     * Get presentations count\n     * @returns {Number}\n     */\n    KShow.prototype.count = function () {\n        return this.presentations.length;\n    };\n\n    /**\n     * Get presentation by index\n     * @param index\n     * @returns {*}\n     */\n    KShow.prototype.get = function (index) {\n        if (index > -1 && index < this.presentations.length) {\n            return this.presentations[index];\n        }\n        return false;\n    };\n\n    /**\n     * Remove presentation at index\n     * @param index\n     * @returns {KShow}\n     */\n    KShow.prototype.remove = function (index) {\n        this.presentations.splice(index, 1);\n\n        return this;\n    };\n\n})(this, this.document);"],"sourceRoot":"/source/"}